require("dotenv").config();
const express = require("express");
const { google } = require("googleapis");
const cors = require("cors");
const axios = require("axios");
const TelegramBot = require("node-telegram-bot-api");
const geoip = require("geoip-lite");
const useragent = require("express-useragent");
const fs = require("fs").promises;
const path = require("path");

const app = express();

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–æ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö middleware –∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
const allowedOrigins = [
  "http://127.0.0.1:8888",
  "http://localhost:8888",
  "http://localhost:3000",
  "https://enel-spb.ru",
  "http://enel-spb.ru",
  "https://housespb.tilda.ws",
  "http://housespb.tilda.ws",
  "http://api.enel-spb.ru",
  "https://api.enel-spb.ru",
];

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS
app.use(
  cors({
    origin: function (origin, callback) {
      // –†–∞–∑—Ä–µ—à–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –±–µ–∑ origin (–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç Postman)
      if (!origin) return callback(null, true);

      if (allowedOrigins.indexOf(origin) !== -1) {
        callback(null, true);
      } else {
        console.log("Blocked origin:", origin);
        callback(new Error("Not allowed by CORS"));
      }
    },
    methods: ["GET", "POST", "OPTIONS"],
    allowedHeaders: ["Content-Type", "Authorization"],
    credentials: true,
    optionsSuccessStatus: 200,
  })
);

// –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
app.use((req, res, next) => {
  const origin = req.headers.origin;
  if (allowedOrigins.includes(origin)) {
    res.setHeader("Access-Control-Allow-Origin", origin);
  }
  res.setHeader("Access-Control-Allow-Methods", "GET, POST, OPTIONS");
  res.setHeader("Access-Control-Allow-Headers", "Content-Type, Authorization");
  res.setHeader("Access-Control-Allow-Credentials", "true");

  // Handle preflight
  if (req.method === "OPTIONS") {
    return res.status(200).end();
  }
  next();
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
app.use((req, res, next) => {
  console.log(`${new Date().toISOString()} ${req.method} ${req.url}`);
  console.log("Origin:", req.headers.origin);
  next();
});

app.use(express.json());
app.use(useragent.express());

// === TELEGRAM BOT CONFIGURATION ===
const CHAT_IDS_FILE = path.join(__dirname, "chat_ids.json");

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ chat ID –∏–∑ —Ñ–∞–π–ª–∞
async function loadChatIds() {
  try {
    const data = await fs.readFile(CHAT_IDS_FILE, "utf8");
    return new Set(JSON.parse(data));
  } catch (error) {
    if (error.code === "ENOENT") {
      await fs.writeFile(CHAT_IDS_FILE, "[]");
      return new Set();
    }
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ chat IDs:", error);
    return new Set();
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è chat ID –≤ —Ñ–∞–π–ª
async function saveChatIds(chatIds) {
  try {
    await fs.writeFile(CHAT_IDS_FILE, JSON.stringify([...chatIds]));
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ chat IDs:", error);
  }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
let activeUsers = new Set();

// –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ chat ID –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
(async () => {
  activeUsers = await loadChatIds();
  console.log("–ó–∞–≥—Ä—É–∂–µ–Ω—ã –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", [...activeUsers]);
})();

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
bot.onText(/\/start/, async (msg) => {
  const chatId = msg.chat.id;

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω
  if (!activeUsers.has(chatId)) {
    activeUsers.add(chatId);
    await saveChatIds(activeUsers);
    console.log(`–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–æ–±–∞–≤–ª–µ–Ω: ${chatId}`);
    bot.sendMessage(
      chatId,
      "–ë–æ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–∞—Å—á–µ—Ç–∞—Ö."
    );
  }
});

// –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É /stop –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
bot.onText(/\/stop/, async (msg) => {
  const chatId = msg.chat.id;
  if (activeUsers.has(chatId)) {
    activeUsers.delete(chatId);
    await saveChatIds(activeUsers);
    bot.sendMessage(
      chatId,
      "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ß—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start"
    );
  }
});

// –î–æ–±–∞–≤–∏–º –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
bot.onText(/\/status/, async (msg) => {
  const chatId = msg.chat.id;
  const status = activeUsers.has(chatId)
    ? "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã"
    : "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è";
  bot.sendMessage(chatId, status);
});

// === SERVER CONFIGURATION ===
app.use(cors());
app.use(express.json());
app.use(useragent.express());

// === GOOGLE SHEETS CONFIGURATION ===
const auth = new google.auth.GoogleAuth({
  keyFile: process.env.GOOGLE_CREDENTIALS_PATH,
  scopes: ["https://www.googleapis.com/auth/spreadsheets"],
});
const spreadsheetId = process.env.GOOGLE_SPREADSHEET_ID;

// === CONFIGURATION ===
const SHEET_MAPPING = {
  value1: "J2",
  value2: "K2",
  value3: "I2",
};

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —è—á–µ–µ–∫
const DISPLAY_CELLS = [{ cell: "E48", valueCell: "F48" }];

// === UTILITY FUNCTIONS ===
function getUserInfo(req) {
  const ip = req.headers["x-forwarded-for"] || req.connection.remoteAddress;
  const geo = geoip.lookup(ip);
  const browser = req.useragent;

  return {
    ip,
    location: geo
      ? {
          country: geo.country,
          city: geo.city,
          timezone: geo.timezone,
        }
      : "Unknown",
    browser: {
      browser: browser.browser,
      version: browser.version,
      os: browser.os,
      platform: browser.platform,
      isMobile: browser.isMobile,
    },
    timestamp: new Date().toLocaleString("ru-RU"),
    referrer: req.headers.referer || "Direct",
  };
}

async function sendToAllUsers(userInfo, formData, pdfBuffer) {
  try {
    console.log("=== –ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===");
    console.log("–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:", [...activeUsers]);
    console.log("PDF –±—É—Ñ–µ—Ä –ø–æ–ª—É—á–µ–Ω:", !!pdfBuffer);
    if (pdfBuffer) {
      console.log("–†–∞–∑–º–µ—Ä PDF:", pdfBuffer.length, "–±–∞–π—Ç");
    }

    let message = `üîî –ù–æ–≤–∞—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ —Å–∞–π—Ç–µ!\n\n`;

    if (formData) {
      message += `üìä –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã:
‚Ä¢ –î–ª–∏–Ω–∞: ${formData.value1}
‚Ä¢ –®–∏—Ä–∏–Ω–∞: ${formData.value2}
‚Ä¢ –¢–æ–ª—â–∏–Ω–∞: ${formData.value3}\n\n`;
    }

    message += `üë§ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:
‚Ä¢ –ë—Ä–∞—É–∑–µ—Ä: ${userInfo.browser.browser} ${userInfo.browser.version}
‚Ä¢ –í—Ä–µ–º—è: ${userInfo.timestamp}`;

    for (const chatId of activeUsers) {
      try {
        console.log(`–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
        await bot.sendMessage(chatId, message);
        console.log(`–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);

        if (pdfBuffer) {
          console.log(`–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ PDF –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
          const buffer = Buffer.from(pdfBuffer);
          console.log(`PDF –±—É—Ñ–µ—Ä —Å–æ–∑–¥–∞–Ω, —Ä–∞–∑–º–µ—Ä: ${buffer.length}`);

          await bot.sendDocument(
            chatId,
            buffer,
            {
              filename: `–†–∞—Å—á–µ—Ç_${new Date().toISOString().slice(0, 10)}.pdf`,
              contentType: "application/pdf",
            },
            {
              caption: "–ü–æ–¥—Ä–æ–±–Ω—ã–π —Ä–∞—Å—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF",
            }
          );
          console.log(`PDF —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}`);
        } else {
          console.log("PDF –±—É—Ñ–µ—Ä –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞");
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${chatId}:`, error);
        console.error(
          "–ü–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ:",
          JSON.stringify(error, null, 2)
        );
        if (error.response?.statusCode === 403) {
          console.log(`–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${chatId} –∏–∑-–∑–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏`);
          activeUsers.delete(chatId);
          await saveChatIds(activeUsers);
        }
      }
    }
    console.log("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π ===");
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:", error);
    console.error("–°—Ç–µ–∫ –æ—à–∏–±–∫–∏:", error.stack);
  }
}

async function generatePdfUrl(spreadsheetId) {
  return (
    `https://docs.google.com/spreadsheets/d/${spreadsheetId}/export?` +
    new URLSearchParams({
      format: "pdf",
      size: "A4",
      portrait: "true",
      fitw: "true",
      gridlines: "false",
      printtitle: "false",
      sheetnames: "false",
      pagenum: "false",
      scale: "4",
      fzr: "true",
    }).toString()
  );
}

async function downloadWithRetry(downloadUrl, token, maxRetries = 3) {
  for (let attempt = 1; attempt <= maxRetries; attempt++) {
    try {
      const response = await axios({
        method: "get",
        url: downloadUrl,
        responseType: "arraybuffer",
        headers: {
          Authorization: `Bearer ${token.access_token}`,
          Accept: "application/pdf",
        },
        timeout: 30000, // —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º timeout –¥–æ 30 —Å–µ–∫—É–Ω–¥
      });

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ PDF
      if (response.headers["content-type"].includes("application/pdf")) {
        console.log(`PDF —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω (–ø–æ–ø—ã—Ç–∫–∞ ${attempt})`);
        return response.data;
      } else {
        throw new Error("–ü–æ–ª—É—á–µ–Ω –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞");
      }
    } catch (error) {
      console.error(
        `–ü–æ–ø—ã—Ç–∫–∞ ${attempt} –∑–∞–≥—Ä—É–∑–∫–∏ PDF –Ω–µ —É–¥–∞–ª–∞—Å—å:`,
        error.message
      );
      if (attempt === maxRetries) throw error;
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è —Å –∫–∞–∂–¥–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
      await new Promise((resolve) => setTimeout(resolve, 2000 * attempt));
    }
  }
}

async function updateSheetCell(sheets, value, cell) {
  try {
    await sheets.spreadsheets.values.update({
      spreadsheetId,
      range: `Sheet1!${cell}`,
      valueInputOption: "RAW",
      resource: {
        values: [[value]],
      },
    });
  } catch (error) {
    console.error(`–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —è—á–µ–π–∫–∏ ${cell}:`, error);
    throw error;
  }
}

// === ROUTES ===
app.post("/update-sheet", async (req, res) => {
  try {
    const sheets = google.sheets({ version: "v4", auth });
    const updatePromises = [];

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π —è—á–µ–π–∫–µ
    for (const [key, value] of Object.entries(req.body)) {
      if (SHEET_MAPPING[key]) {
        updatePromises.push(updateSheetCell(sheets, value, SHEET_MAPPING[key]));
      }
    }

    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    await Promise.all(updatePromises);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ Telegram
    await sendToAllUsers(getUserInfo(req), req.body);

    res.json({ success: true });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã:", error);
    res.status(500).json({
      error: "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã",
      details: error.message,
    });
  }
});

app.get("/download-file", async (req, res) => {
  try {
    console.log("=== –ù–∞—á–∞–ª–æ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ===");
    const client = await auth.getClient();
    const token = await client.getAccessToken();

    const downloadUrl = await generatePdfUrl(spreadsheetId);
    const pdfBuffer = await downloadWithRetry(downloadUrl, token);

    const userInfo = getUserInfo(req);
    await sendToAllUsers(userInfo, null, pdfBuffer);

    // –§–æ—Ä–º–∏—Ä—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    const date = new Date().toISOString().split("T")[0]; // –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD
    const fileName = `enel-spb.ru_${date}.pdf`;

    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
    res.setHeader("Content-Type", "application/pdf");
    res.setHeader("Content-Disposition", "attachment; filename=" + fileName);
    res.send(pdfBuffer);

    console.log("=== –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ ===");
  } catch (error) {
    console.error("=== –û–®–ò–ë–ö–ê –ü–†–ò –°–ö–ê–ß–ò–í–ê–ù–ò–ò –§–ê–ô–õ–ê ===");
    console.error("–°–æ–æ–±—â–µ–Ω–∏–µ:", error.message);
    console.error("–°—Ç–µ–∫:", error.stack);
    res.status(500).json({
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞",
      details: error.message,
    });
  }
});

// –û–±–Ω–æ–≤–ª—è–µ–º endpoint –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
app.get("/get-sheet-data", async (req, res) => {
  try {
    const sheets = google.sheets({ version: "v4", auth });
    const data = {
      values: {},
      displayLines: [],
    };

    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è —Ñ–æ—Ä–º—ã
    for (const [key, cell] of Object.entries(SHEET_MAPPING)) {
      const response = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: `Sheet1!${cell}`,
        valueRenderOption: "UNFORMATTED_VALUE",
      });
      data.values[key] = response.data.values?.[0]?.[0] || "";
    }

    // –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —É–∫–∞–∑–∞–Ω–Ω—ã—Ö —è—á–µ–µ–∫
    for (const { cell, valueCell } of DISPLAY_CELLS) {
      const nameResponse = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: `Sheet1!${cell}`,
        valueRenderOption: "FORMATTED_VALUE",
      });

      const valueResponse = await sheets.spreadsheets.values.get({
        spreadsheetId,
        range: `Sheet1!${valueCell}`,
        valueRenderOption: "FORMATTED_VALUE",
      });

      const name = nameResponse.data.values?.[0]?.[0];
      const value = valueResponse.data.values?.[0]?.[0];

      if (name && value) {
        data.displayLines.push({
          text: `${value} ‚ÇΩ`,
        });
      }
    }

    res.json(data);
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã:", error);
    res.status(500).json({
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü—ã",
      details: error.message,
    });
  }
});

// === SERVER START ===
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => console.log(`Server running on port ${PORT}`));
